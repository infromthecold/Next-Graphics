using System;
using System.Drawing;
using System.Windows.Forms;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;

namespace NextGraphics
{
	public partial class Palette : Form
	{
		public	enum	PaletteMapping
		{ 
			mapped256,
			mapped512,
			mappedCustom,
		}
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Spectrum Next palettes
		//
		// 512 colours
		// 
		//-------------------------------------------------------------------------------------------------------------------

		public	byte[,]		SpecNext512		={	{0x00,0x00,0x00},{0x00,0x00,0x24},{0x00,0x00,0x49},{0x00,0x00,0x6D},{0x00,0x00,0x92},{0x00,0x00,0xB6},{0x00,0x00,0xDB},{0x00,0x00,0xFF},{0x00,0x24,0x00},{0x00,0x24,0x24},{0x00,0x24,0x49},{0x00,0x24,0x6D},{0x00,0x24,0x92},{0x00,0x24,0xB6},{0x00,0x24,0xDB},{0x00,0x24,0xFF},
									{0x00,0x49,0x00},{0x00,0x49,0x24},{0x00,0x49,0x49},{0x00,0x49,0x6D},{0x00,0x49,0x92},{0x00,0x49,0xB6},{0x00,0x49,0xDB},{0x00,0x49,0xFF},{0x00,0x6D,0x00},{0x00,0x6D,0x24},{0x00,0x6D,0x49},{0x00,0x6D,0x6D},{0x00,0x6D,0x92},{0x00,0x6D,0xB6},{0x00,0x6D,0xDB},{0x00,0x6D,0xFF},
									{0x00,0x92,0x00},{0x00,0x92,0x24},{0x00,0x92,0x49},{0x00,0x92,0x6D},{0x00,0x92,0x92},{0x00,0x92,0xB6},{0x00,0x92,0xDB},{0x00,0x92,0xFF},{0x00,0xB6,0x00},{0x00,0xB6,0x24},{0x00,0xB6,0x49},{0x00,0xB6,0x6D},{0x00,0xB6,0x92},{0x00,0xB6,0xB6},{0x00,0xB6,0xDB},{0x00,0xB6,0xFF},
									{0x00,0xDB,0x00},{0x00,0xDB,0x24},{0x00,0xDB,0x49},{0x00,0xDB,0x6D},{0x00,0xDB,0x92},{0x00,0xDB,0xB6},{0x00,0xDB,0xDB},{0x00,0xDB,0xFF},{0x00,0xFF,0x00},{0x00,0xFF,0x24},{0x00,0xFF,0x49},{0x00,0xFF,0x6D},{0x00,0xFF,0x92},{0x00,0xFF,0xB6},{0x00,0xFF,0xDB},{0x00,0xFF,0xFF},
									{0x24,0x00,0x00},{0x24,0x00,0x24},{0x24,0x00,0x49},{0x24,0x00,0x6D},{0x24,0x00,0x92},{0x24,0x00,0xB6},{0x24,0x00,0xDB},{0x24,0x00,0xFF},{0x24,0x24,0x00},{0x24,0x24,0x24},{0x24,0x24,0x49},{0x24,0x24,0x6D},{0x24,0x24,0x92},{0x24,0x24,0xB6},{0x24,0x24,0xDB},{0x24,0x24,0xFF},
									{0x24,0x49,0x00},{0x24,0x49,0x24},{0x24,0x49,0x49},{0x24,0x49,0x6D},{0x24,0x49,0x92},{0x24,0x49,0xB6},{0x24,0x49,0xDB},{0x24,0x49,0xFF},{0x24,0x6D,0x00},{0x24,0x6D,0x24},{0x24,0x6D,0x49},{0x24,0x6D,0x6D},{0x24,0x6D,0x92},{0x24,0x6D,0xB6},{0x24,0x6D,0xDB},{0x24,0x6D,0xFF},
									{0x24,0x92,0x00},{0x24,0x92,0x24},{0x24,0x92,0x49},{0x24,0x92,0x6D},{0x24,0x92,0x92},{0x24,0x92,0xB6},{0x24,0x92,0xDB},{0x24,0x92,0xFF},{0x24,0xB6,0x00},{0x24,0xB6,0x24},{0x24,0xB6,0x49},{0x24,0xB6,0x6D},{0x24,0xB6,0x92},{0x24,0xB6,0xB6},{0x24,0xB6,0xDB},{0x24,0xB6,0xFF},
									{0x24,0xDB,0x00},{0x24,0xDB,0x24},{0x24,0xDB,0x49},{0x24,0xDB,0x6D},{0x24,0xDB,0x92},{0x24,0xDB,0xB6},{0x24,0xDB,0xDB},{0x24,0xDB,0xFF},{0x24,0xFF,0x00},{0x24,0xFF,0x24},{0x24,0xFF,0x49},{0x24,0xFF,0x6D},{0x24,0xFF,0x92},{0x24,0xFF,0xB6},{0x24,0xFF,0xDB},{0x24,0xFF,0xFF},
									{0x49,0x00,0x00},{0x49,0x00,0x24},{0x49,0x00,0x49},{0x49,0x00,0x6D},{0x49,0x00,0x92},{0x49,0x00,0xB6},{0x49,0x00,0xDB},{0x49,0x00,0xFF},{0x49,0x24,0x00},{0x49,0x24,0x24},{0x49,0x24,0x49},{0x49,0x24,0x6D},{0x49,0x24,0x92},{0x49,0x24,0xB6},{0x49,0x24,0xDB},{0x49,0x24,0xFF},
									{0x49,0x49,0x00},{0x49,0x49,0x24},{0x49,0x49,0x49},{0x49,0x49,0x6D},{0x49,0x49,0x92},{0x49,0x49,0xB6},{0x49,0x49,0xDB},{0x49,0x49,0xFF},{0x49,0x6D,0x00},{0x49,0x6D,0x24},{0x49,0x6D,0x49},{0x49,0x6D,0x6D},{0x49,0x6D,0x92},{0x49,0x6D,0xB6},{0x49,0x6D,0xDB},{0x49,0x6D,0xFF},
									{0x49,0x92,0x00},{0x49,0x92,0x24},{0x49,0x92,0x49},{0x49,0x92,0x6D},{0x49,0x92,0x92},{0x49,0x92,0xB6},{0x49,0x92,0xDB},{0x49,0x92,0xFF},{0x49,0xB6,0x00},{0x49,0xB6,0x24},{0x49,0xB6,0x49},{0x49,0xB6,0x6D},{0x49,0xB6,0x92},{0x49,0xB6,0xB6},{0x49,0xB6,0xDB},{0x49,0xB6,0xFF},
									{0x49,0xDB,0x00},{0x49,0xDB,0x24},{0x49,0xDB,0x49},{0x49,0xDB,0x6D},{0x49,0xDB,0x92},{0x49,0xDB,0xB6},{0x49,0xDB,0xDB},{0x49,0xDB,0xFF},{0x49,0xFF,0x00},{0x49,0xFF,0x24},{0x49,0xFF,0x49},{0x49,0xFF,0x6D},{0x49,0xFF,0x92},{0x49,0xFF,0xB6},{0x49,0xFF,0xDB},{0x49,0xFF,0xFF},
									{0x6D,0x00,0x00},{0x6D,0x00,0x24},{0x6D,0x00,0x49},{0x6D,0x00,0x6D},{0x6D,0x00,0x92},{0x6D,0x00,0xB6},{0x6D,0x00,0xDB},{0x6D,0x00,0xFF},{0x6D,0x24,0x00},{0x6D,0x24,0x24},{0x6D,0x24,0x49},{0x6D,0x24,0x6D},{0x6D,0x24,0x92},{0x6D,0x24,0xB6},{0x6D,0x24,0xDB},{0x6D,0x24,0xFF},
									{0x6D,0x49,0x00},{0x6D,0x49,0x24},{0x6D,0x49,0x49},{0x6D,0x49,0x6D},{0x6D,0x49,0x92},{0x6D,0x49,0xB6},{0x6D,0x49,0xDB},{0x6D,0x49,0xFF},{0x6D,0x6D,0x00},{0x6D,0x6D,0x24},{0x6D,0x6D,0x49},{0x6D,0x6D,0x6D},{0x6D,0x6D,0x92},{0x6D,0x6D,0xB6},{0x6D,0x6D,0xDB},{0x6D,0x6D,0xFF},
									{0x6D,0x92,0x00},{0x6D,0x92,0x24},{0x6D,0x92,0x49},{0x6D,0x92,0x6D},{0x6D,0x92,0x92},{0x6D,0x92,0xB6},{0x6D,0x92,0xDB},{0x6D,0x92,0xFF},{0x6D,0xB6,0x00},{0x6D,0xB6,0x24},{0x6D,0xB6,0x49},{0x6D,0xB6,0x6D},{0x6D,0xB6,0x92},{0x6D,0xB6,0xB6},{0x6D,0xB6,0xDB},{0x6D,0xB6,0xFF},
									{0x6D,0xDB,0x00},{0x6D,0xDB,0x24},{0x6D,0xDB,0x49},{0x6D,0xDB,0x6D},{0x6D,0xDB,0x92},{0x6D,0xDB,0xB6},{0x6D,0xDB,0xDB},{0x6D,0xDB,0xFF},{0x6D,0xFF,0x00},{0x6D,0xFF,0x24},{0x6D,0xFF,0x49},{0x6D,0xFF,0x6D},{0x6D,0xFF,0x92},{0x6D,0xFF,0xB6},{0x6D,0xFF,0xDB},{0x6D,0xFF,0xFF},
									{0x92,0x00,0x00},{0x92,0x00,0x24},{0x92,0x00,0x49},{0x92,0x00,0x6D},{0x92,0x00,0x92},{0x92,0x00,0xB6},{0x92,0x00,0xDB},{0x92,0x00,0xFF},{0x92,0x24,0x00},{0x92,0x24,0x24},{0x92,0x24,0x49},{0x92,0x24,0x6D},{0x92,0x24,0x92},{0x92,0x24,0xB6},{0x92,0x24,0xDB},{0x92,0x24,0xFF},
									{0x92,0x49,0x00},{0x92,0x49,0x24},{0x92,0x49,0x49},{0x92,0x49,0x6D},{0x92,0x49,0x92},{0x92,0x49,0xB6},{0x92,0x49,0xDB},{0x92,0x49,0xFF},{0x92,0x6D,0x00},{0x92,0x6D,0x24},{0x92,0x6D,0x49},{0x92,0x6D,0x6D},{0x92,0x6D,0x92},{0x92,0x6D,0xB6},{0x92,0x6D,0xDB},{0x92,0x6D,0xFF},
									{0x92,0x92,0x00},{0x92,0x92,0x24},{0x92,0x92,0x49},{0x92,0x92,0x6D},{0x92,0x92,0x92},{0x92,0x92,0xB6},{0x92,0x92,0xDB},{0x92,0x92,0xFF},{0x92,0xB6,0x00},{0x92,0xB6,0x24},{0x92,0xB6,0x49},{0x92,0xB6,0x6D},{0x92,0xB6,0x92},{0x92,0xB6,0xB6},{0x92,0xB6,0xDB},{0x92,0xB6,0xFF},
									{0x92,0xDB,0x00},{0x92,0xDB,0x24},{0x92,0xDB,0x49},{0x92,0xDB,0x6D},{0x92,0xDB,0x92},{0x92,0xDB,0xB6},{0x92,0xDB,0xDB},{0x92,0xDB,0xFF},{0x92,0xFF,0x00},{0x92,0xFF,0x24},{0x92,0xFF,0x49},{0x92,0xFF,0x6D},{0x92,0xFF,0x92},{0x92,0xFF,0xB6},{0x92,0xFF,0xDB},{0x92,0xFF,0xFF},
									{0xB6,0x00,0x00},{0xB6,0x00,0x24},{0xB6,0x00,0x49},{0xB6,0x00,0x6D},{0xB6,0x00,0x92},{0xB6,0x00,0xB6},{0xB6,0x00,0xDB},{0xB6,0x00,0xFF},{0xB6,0x24,0x00},{0xB6,0x24,0x24},{0xB6,0x24,0x49},{0xB6,0x24,0x6D},{0xB6,0x24,0x92},{0xB6,0x24,0xB6},{0xB6,0x24,0xDB},{0xB6,0x24,0xFF},
									{0xB6,0x49,0x00},{0xB6,0x49,0x24},{0xB6,0x49,0x49},{0xB6,0x49,0x6D},{0xB6,0x49,0x92},{0xB6,0x49,0xB6},{0xB6,0x49,0xDB},{0xB6,0x49,0xFF},{0xB6,0x6D,0x00},{0xB6,0x6D,0x24},{0xB6,0x6D,0x49},{0xB6,0x6D,0x6D},{0xB6,0x6D,0x92},{0xB6,0x6D,0xB6},{0xB6,0x6D,0xDB},{0xB6,0x6D,0xFF},
									{0xB6,0x92,0x00},{0xB6,0x92,0x24},{0xB6,0x92,0x49},{0xB6,0x92,0x6D},{0xB6,0x92,0x92},{0xB6,0x92,0xB6},{0xB6,0x92,0xDB},{0xB6,0x92,0xFF},{0xB6,0xB6,0x00},{0xB6,0xB6,0x24},{0xB6,0xB6,0x49},{0xB6,0xB6,0x6D},{0xB6,0xB6,0x92},{0xB6,0xB6,0xB6},{0xB6,0xB6,0xDB},{0xB6,0xB6,0xFF},
									{0xB6,0xDB,0x00},{0xB6,0xDB,0x24},{0xB6,0xDB,0x49},{0xB6,0xDB,0x6D},{0xB6,0xDB,0x92},{0xB6,0xDB,0xB6},{0xB6,0xDB,0xDB},{0xB6,0xDB,0xFF},{0xB6,0xFF,0x00},{0xB6,0xFF,0x24},{0xB6,0xFF,0x49},{0xB6,0xFF,0x6D},{0xB6,0xFF,0x92},{0xB6,0xFF,0xB6},{0xB6,0xFF,0xDB},{0xB6,0xFF,0xFF},
									{0xDB,0x00,0x00},{0xDB,0x00,0x24},{0xDB,0x00,0x49},{0xDB,0x00,0x6D},{0xDB,0x00,0x92},{0xDB,0x00,0xB6},{0xDB,0x00,0xDB},{0xDB,0x00,0xFF},{0xDB,0x24,0x00},{0xDB,0x24,0x24},{0xDB,0x24,0x49},{0xDB,0x24,0x6D},{0xDB,0x24,0x92},{0xDB,0x24,0xB6},{0xDB,0x24,0xDB},{0xDB,0x24,0xFF},
									{0xDB,0x49,0x00},{0xDB,0x49,0x24},{0xDB,0x49,0x49},{0xDB,0x49,0x6D},{0xDB,0x49,0x92},{0xDB,0x49,0xB6},{0xDB,0x49,0xDB},{0xDB,0x49,0xFF},{0xDB,0x6D,0x00},{0xDB,0x6D,0x24},{0xDB,0x6D,0x49},{0xDB,0x6D,0x6D},{0xDB,0x6D,0x92},{0xDB,0x6D,0xB6},{0xDB,0x6D,0xDB},{0xDB,0x6D,0xFF},
									{0xDB,0x92,0x00},{0xDB,0x92,0x24},{0xDB,0x92,0x49},{0xDB,0x92,0x6D},{0xDB,0x92,0x92},{0xDB,0x92,0xB6},{0xDB,0x92,0xDB},{0xDB,0x92,0xFF},{0xDB,0xB6,0x00},{0xDB,0xB6,0x24},{0xDB,0xB6,0x49},{0xDB,0xB6,0x6D},{0xDB,0xB6,0x92},{0xDB,0xB6,0xB6},{0xDB,0xB6,0xDB},{0xDB,0xB6,0xFF},
									{0xDB,0xDB,0x00},{0xDB,0xDB,0x24},{0xDB,0xDB,0x49},{0xDB,0xDB,0x6D},{0xDB,0xDB,0x92},{0xDB,0xDB,0xB6},{0xDB,0xDB,0xDB},{0xDB,0xDB,0xFF},{0xDB,0xFF,0x00},{0xDB,0xFF,0x24},{0xDB,0xFF,0x49},{0xDB,0xFF,0x6D},{0xDB,0xFF,0x92},{0xDB,0xFF,0xB6},{0xDB,0xFF,0xDB},{0xDB,0xFF,0xFF},
									{0xFF,0x00,0x00},{0xFF,0x00,0x24},{0xFF,0x00,0x49},{0xFF,0x00,0x6D},{0xFF,0x00,0x92},{0xFF,0x00,0xB6},{0xFF,0x00,0xDB},{0xFF,0x00,0xFF},{0xFF,0x24,0x00},{0xFF,0x24,0x24},{0xFF,0x24,0x49},{0xFF,0x24,0x6D},{0xFF,0x24,0x92},{0xFF,0x24,0xB6},{0xFF,0x24,0xDB},{0xFF,0x24,0xFF},
									{0xFF,0x49,0x00},{0xFF,0x49,0x24},{0xFF,0x49,0x49},{0xFF,0x49,0x6D},{0xFF,0x49,0x92},{0xFF,0x49,0xB6},{0xFF,0x49,0xDB},{0xFF,0x49,0xFF},{0xFF,0x6D,0x00},{0xFF,0x6D,0x24},{0xFF,0x6D,0x49},{0xFF,0x6D,0x6D},{0xFF,0x6D,0x92},{0xFF,0x6D,0xB6},{0xFF,0x6D,0xDB},{0xFF,0x6D,0xFF},
									{0xFF,0x92,0x00},{0xFF,0x92,0x24},{0xFF,0x92,0x49},{0xFF,0x92,0x6D},{0xFF,0x92,0x92},{0xFF,0x92,0xB6},{0xFF,0x92,0xDB},{0xFF,0x92,0xFF},{0xFF,0xB6,0x00},{0xFF,0xB6,0x24},{0xFF,0xB6,0x49},{0xFF,0xB6,0x6D},{0xFF,0xB6,0x92},{0xFF,0xB6,0xB6},{0xFF,0xB6,0xDB},{0xFF,0xB6,0xFF},
									{0xFF,0xDB,0x00},{0xFF,0xDB,0x24},{0xFF,0xDB,0x49},{0xFF,0xDB,0x6D},{0xFF,0xDB,0x92},{0xFF,0xDB,0xB6},{0xFF,0xDB,0xDB},{0xFF,0xDB,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x24},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0xB6},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF}};	
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// 256 colours
		//
		//-------------------------------------------------------------------------------------------------------------------

		public	byte[,]		SpecNext256		={	{0x00,0x00,0x00},{0x00,0x00,0x6D},{0x00,0x00,0xB6},{0x00,0x00,0xFF},{0x00,0x24,0x00},{0x00,0x24,0x6D},{0x00,0x24,0xB6},{0x00,0x24,0xFF},{0x00,0x49,0x00},{0x00,0x49,0x6D},{0x00,0x49,0xB6},{0x00,0x49,0xFF},{0x00,0x6D,0x00},{0x00,0x6D,0x6D},{0x00,0x6D,0xB6},{0x00,0x6D,0xFF},
									{0x00,0x92,0x00},{0x00,0x92,0x6D},{0x00,0x92,0xB6},{0x00,0x92,0xFF},{0x00,0xB6,0x00},{0x00,0xB6,0x6D},{0x00,0xB6,0xB6},{0x00,0xB6,0xFF},{0x00,0xDB,0x00},{0x00,0xDB,0x6D},{0x00,0xDB,0xB6},{0x00,0xDB,0xFF},{0x00,0xFF,0x00},{0x00,0xFF,0x6D},{0x00,0xFF,0xB6},{0x00,0xFF,0xFF},
									{0x24,0x00,0x00},{0x24,0x00,0x6D},{0x24,0x00,0xB6},{0x24,0x00,0xFF},{0x24,0x24,0x00},{0x24,0x24,0x6D},{0x24,0x24,0xB6},{0x24,0x24,0xFF},{0x24,0x49,0x00},{0x24,0x49,0x6D},{0x24,0x49,0xB6},{0x24,0x49,0xFF},{0x24,0x6D,0x00},{0x24,0x6D,0x6D},{0x24,0x6D,0xB6},{0x24,0x6D,0xFF},
									{0x24,0x92,0x00},{0x24,0x92,0x6D},{0x24,0x92,0xB6},{0x24,0x92,0xFF},{0x24,0xB6,0x00},{0x24,0xB6,0x6D},{0x24,0xB6,0xB6},{0x24,0xB6,0xFF},{0x24,0xDB,0x00},{0x24,0xDB,0x6D},{0x24,0xDB,0xB6},{0x24,0xDB,0xFF},{0x24,0xFF,0x00},{0x24,0xFF,0x6D},{0x24,0xFF,0xB6},{0x24,0xFF,0xFF},
									{0x49,0x00,0x00},{0x49,0x00,0x6D},{0x49,0x00,0xB6},{0x49,0x00,0xFF},{0x49,0x24,0x00},{0x49,0x24,0x6D},{0x49,0x24,0xB6},{0x49,0x24,0xFF},{0x49,0x49,0x00},{0x49,0x49,0x6D},{0x49,0x49,0xB6},{0x49,0x49,0xFF},{0x49,0x6D,0x00},{0x49,0x6D,0x6D},{0x49,0x6D,0xB6},{0x49,0x6D,0xFF},
									{0x49,0x92,0x00},{0x49,0x92,0x6D},{0x49,0x92,0xB6},{0x49,0x92,0xFF},{0x49,0xB6,0x00},{0x49,0xB6,0x6D},{0x49,0xB6,0xB6},{0x49,0xB6,0xFF},{0x49,0xDB,0x00},{0x49,0xDB,0x6D},{0x49,0xDB,0xB6},{0x49,0xDB,0xFF},{0x49,0xFF,0x00},{0x49,0xFF,0x6D},{0x49,0xFF,0xB6},{0x49,0xFF,0xFF},
									{0x6D,0x00,0x00},{0x6D,0x00,0x6D},{0x6D,0x00,0xB6},{0x6D,0x00,0xFF},{0x6D,0x24,0x00},{0x6D,0x24,0x6D},{0x6D,0x24,0xB6},{0x6D,0x24,0xFF},{0x6D,0x49,0x00},{0x6D,0x49,0x6D},{0x6D,0x49,0xB6},{0x6D,0x49,0xFF},{0x6D,0x6D,0x00},{0x6D,0x6D,0x6D},{0x6D,0x6D,0xB6},{0x6D,0x6D,0xFF},
									{0x6D,0x92,0x00},{0x6D,0x92,0x6D},{0x6D,0x92,0xB6},{0x6D,0x92,0xFF},{0x6D,0xB6,0x00},{0x6D,0xB6,0x6D},{0x6D,0xB6,0xB6},{0x6D,0xB6,0xFF},{0x6D,0xDB,0x00},{0x6D,0xDB,0x6D},{0x6D,0xDB,0xB6},{0x6D,0xDB,0xFF},{0x6D,0xFF,0x00},{0x6D,0xFF,0x6D},{0x6D,0xFF,0xB6},{0x6D,0xFF,0xFF},
									{0x92,0x00,0x00},{0x92,0x00,0x6D},{0x92,0x00,0xB6},{0x92,0x00,0xFF},{0x92,0x24,0x00},{0x92,0x24,0x6D},{0x92,0x24,0xB6},{0x92,0x24,0xFF},{0x92,0x49,0x00},{0x92,0x49,0x6D},{0x92,0x49,0xB6},{0x92,0x49,0xFF},{0x92,0x6D,0x00},{0x92,0x6D,0x6D},{0x92,0x6D,0xB6},{0x92,0x6D,0xFF},
									{0x92,0x92,0x00},{0x92,0x92,0x6D},{0x92,0x92,0xB6},{0x92,0x92,0xFF},{0x92,0xB6,0x00},{0x92,0xB6,0x6D},{0x92,0xB6,0xB6},{0x92,0xB6,0xFF},{0x92,0xDB,0x00},{0x92,0xDB,0x6D},{0x92,0xDB,0xB6},{0x92,0xDB,0xFF},{0x92,0xFF,0x00},{0x92,0xFF,0x6D},{0x92,0xFF,0xB6},{0x92,0xFF,0xFF},
									{0xB6,0x00,0x00},{0xB6,0x00,0x6D},{0xB6,0x00,0xB6},{0xB6,0x00,0xFF},{0xB6,0x24,0x00},{0xB6,0x24,0x6D},{0xB6,0x24,0xB6},{0xB6,0x24,0xFF},{0xB6,0x49,0x00},{0xB6,0x49,0x6D},{0xB6,0x49,0xB6},{0xB6,0x49,0xFF},{0xB6,0x6D,0x00},{0xB6,0x6D,0x6D},{0xB6,0x6D,0xB6},{0xB6,0x6D,0xFF},
									{0xB6,0x92,0x00},{0xB6,0x92,0x6D},{0xB6,0x92,0xB6},{0xB6,0x92,0xFF},{0xB6,0xB6,0x00},{0xB6,0xB6,0x6D},{0xB6,0xB6,0xB6},{0xB6,0xB6,0xFF},{0xB6,0xDB,0x00},{0xB6,0xDB,0x6D},{0xB6,0xDB,0xB6},{0xB6,0xDB,0xFF},{0xB6,0xFF,0x00},{0xB6,0xFF,0x6D},{0xB6,0xFF,0xB6},{0xB6,0xFF,0xFF},
									{0xDB,0x00,0x00},{0xDB,0x00,0x6D},{0xDB,0x00,0xB6},{0xDB,0x00,0xFF},{0xDB,0x24,0x00},{0xDB,0x24,0x6D},{0xDB,0x24,0xB6},{0xDB,0x24,0xFF},{0xDB,0x49,0x00},{0xDB,0x49,0x6D},{0xDB,0x49,0xB6},{0xDB,0x49,0xFF},{0xDB,0x6D,0x00},{0xDB,0x6D,0x6D},{0xDB,0x6D,0xB6},{0xDB,0x6D,0xFF},
									{0xDB,0x92,0x00},{0xDB,0x92,0x6D},{0xDB,0x92,0xB6},{0xDB,0x92,0xFF},{0xDB,0xB6,0x00},{0xDB,0xB6,0x6D},{0xDB,0xB6,0xB6},{0xDB,0xB6,0xFF},{0xDB,0xDB,0x00},{0xDB,0xDB,0x6D},{0xDB,0xDB,0xB6},{0xDB,0xDB,0xFF},{0xDB,0xFF,0x00},{0xDB,0xFF,0x6D},{0xDB,0xFF,0xB6},{0xDB,0xFF,0xFF},
									{0xFF,0x00,0x00},{0xFF,0x00,0x6D},{0xFF,0x00,0xB6},{0xFF,0x00,0xFF},{0xFF,0x24,0x00},{0xFF,0x24,0x6D},{0xFF,0x24,0xB6},{0xFF,0x24,0xFF},{0xFF,0x49,0x00},{0xFF,0x49,0x6D},{0xFF,0x49,0xB6},{0xFF,0x49,0xFF},{0xFF,0x6D,0x00},{0xFF,0x6D,0x6D},{0xFF,0x6D,0xB6},{0xFF,0x6D,0xFF},
									{0xFF,0x92,0x00},{0xFF,0x92,0x6D},{0xFF,0x92,0xB6},{0xFF,0x92,0xFF},{0xFF,0xB6,0x00},{0xFF,0xB6,0x6D},{0xFF,0xB6,0xB6},{0xFF,0xB6,0xFF},{0xFF,0xDB,0x00},{0xFF,0xDB,0x6D},{0xFF,0xDB,0xB6},{0xFF,0xDB,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xB6},{0xFF,0xFF,0xFF}};
		public	Main			parentForm;
		public	byte[,]			loadedPalette		=	new	byte[256,3];
		public	Button[]		colours			=	new	Button[256];
		private	Label[] 		numbers			=	new	Label[32];
		public	int			transIndex		=	0;	
		public	PaletteMapping		paletteSetting		=	PaletteMapping.mapped256;
		public int			loadedColourCount	=	255;
		public	bool			fourBitOutput		=	false;
		private	ImageSelect		selectForm		=	new	ImageSelect();		
		//private	short			thisIndex		=	0;
		private	bool			littleEndian		=	false;
		private	Colour			thisColour		=	new Colour();
		private	Colour			thatColour		=	new Colour();
		private	Color			selectedColor		=	Color.FromArgb(64,64,64);
		private	bool			colourPicking		=	false;

		//-------------------------------------------------------------------------------------------------------------------
		//
		// Constructor
		//
		//-------------------------------------------------------------------------------------------------------------------

		public Palette()
		{
			InitializeComponent();
			createPalette();
			this.Width		=	510;
			this.Height		=	428;
			this.MinimumSize	=	new Size(510,428);
			this.MaximumSize	=	new Size(510,428);
			littleEndian		=	BitConverter.IsLittleEndian;
		}
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Add all the buttons to make the palette clickable
		//
		//-------------------------------------------------------------------------------------------------------------------
		
		private	void	createPalette()
		{
			int	across	=	0;
			int	down	=	0;
			for(int c=0;c<256;c++)
			{
				colours[c]				=	new Button();
				this.Controls.Add(colours[c]);
				colours[c].Text				=	"";
				colours[c].Location			=	new Point(160+(across*20),10+(down*20));
				colours[c].Size				=	new Size(22, 22);
				colours[c].BackColor			=	Color.FromArgb(SpecNext256[c,0],SpecNext256[c,1],SpecNext256[c,2]);
				colours[c].Click			+=	openColourMixerClick;
				colours[c].MouseHover			+=	colourMouseOver;
				//colours[c].Enabled			=	false;
				colours[c].Name				=	c.ToString();				
				colours[c].FlatStyle			=	FlatStyle.Flat;
				colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				colours[c].FlatAppearance.BorderSize	=	1;
				//colours[c].ForeColor			=	Color.Black;
				loadedPalette[c,0]			=	SystemColors.Control.R;
				loadedPalette[c,1]			=	SystemColors.Control.G;
				loadedPalette[c,2]			=	SystemColors.Control.B;
				across++;
				if(across>15)
				{
					across	=	0;
					down++;
				}
			}
			tColourIndex1.Text			=	transIndex.ToString();
			colours[transIndex].Text		=	"X";
			radioButton1.Checked	=	true;

		}
		//-------------------------------------------------------------------------------------------------------------------
		// 
		//  highlight the colour under the mouse
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void colourMouseOver(object sender, EventArgs e)
		{
			
			Button	thisButton	=	(Button) sender;
			hexColour.Text		=	"#"+thisButton.BackColor.R.ToString("X2") + thisButton.BackColor.G.ToString("X2") + thisButton.BackColor.B.ToString("X2");
		}
		
		//-------------------------------------------------------------------------------------------------------------------
		// 
		//  init the form
		//
		//-------------------------------------------------------------------------------------------------------------------

		public	void	setForm()
		{
			tColourIndex1.Text			=	transIndex.ToString();
			colours[transIndex].Text		=	"X";
			if(paletteSetting == PaletteMapping.mappedCustom)
			{
				for(int c=0;c<256;c++)
				{				
					colours[c].BackColor	=	Color.FromArgb(loadedPalette[c,0],loadedPalette[c,1],loadedPalette[c,2]);
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}
				for(int c=0;c<loadedColourCount;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	selectedColor;
				}
			}


		}

		//-------------------------------------------------------------------------------------------------------------------
		// 
		// Click for the palette buttons
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void openColourMixerClick(object sender, EventArgs e)
		{
			Button	thisButton	=	(Button) sender;
			int	colourIndex	=	0;
			if(colourPicking==false)
			{ 			
				if(paletteSetting == PaletteMapping.mappedCustom)
				{ 
					if(colorDialog1.ShowDialog() == DialogResult.OK)  
					{  
						colourIndex			=	int.Parse(thisButton.Name);
						thisButton.BackColor = colorDialog1.Color;  
						loadedPalette[colourIndex,0]	=	thisButton.BackColor.R;
						loadedPalette[colourIndex,1]	=	thisButton.BackColor.G;
						loadedPalette[colourIndex,2]	=	thisButton.BackColor.B;						
						setTColour(ref colours[transIndex]);
					} 
				}
			}
			else
			{
				if(int.Parse(thisButton.Name)>loadedColourCount)
				{
					MessageBox.Show("Transparent Colour out of range of used colours", "Error", MessageBoxButtons.OK, MessageBoxIcon.Information);						
					colourPicking			=	false;
				}
				else
				{ 
					setTColour(ref thisButton);
					colourPicking			=	false;
				}
			}
		}
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Set the transparent colour
		//
		//-------------------------------------------------------------------------------------------------------------------

		private	void	setTColour(ref	Button thisPanel)
		{
			int	colourIndex		=	int.Parse(tColourIndex1.Text);
			colours[colourIndex].Text	=	"";
			tColourIndex1.Text		=	thisPanel.Name;
			transIndex			=	int.Parse(tColourIndex1.Text);
			tColourIndex1.BackColor		=	thisPanel.BackColor;
			tColourIndex1.ForeColor		=	(384 - tColourIndex1.BackColor.R - tColourIndex1.BackColor.G - tColourIndex1.BackColor.B) > 0 ? Color.White : Color.Black;
			thisPanel.Text			=	"X";
			thisPanel.ForeColor		=	tColourIndex1.ForeColor;
		}

	
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Load a palette file
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void loadPalette(object sender, EventArgs e)
		{
			//selectForm.loadPalette(sender,e);

			//byte[]	bytesBuffer				=	new	byte[2];
			OpenFileDialog loadPaletteDialog		=	new OpenFileDialog();
			loadPaletteDialog.InitialDirectory		=	Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			loadPaletteDialog.Multiselect			=	true;
			loadPaletteDialog.RestoreDirectory		=	true ;
			loadPaletteDialog.Filter			=	"Palette Files (*.act)|*.act|Mac Palette Files (*.8bct)|*.8bct|All Files (*.*)|*.*";
			loadPaletteDialog.FilterIndex			=	1;
			if (loadPaletteDialog.ShowDialog(this) == DialogResult.OK)
			{
				selectForm.fullNames.Clear();
				foreach(string name in loadPaletteDialog.FileNames)
				{ 
					selectForm.fullNames.Add(name);
				}
				selectForm.paletteFiles		=	true;
				selectForm.fillList();
				selectForm.StartPosition	=	FormStartPosition.CenterParent;
				selectForm.ShowDialog();	
				if (selectForm.DialogResult == DialogResult.OK && selectForm.fullNames.Count>0 && selectForm.listBox1.SelectedIndex>=0)
				{
					// open the palette import panel
					for(int c=0;c<selectForm.count;c++)
					{
						loadedPalette[selectForm.too+c,0]	=	selectForm.loadedPalette[selectForm.from+c,0];
						loadedPalette[selectForm.too+c,1]	=	selectForm.loadedPalette[selectForm.from+c,1];
						loadedPalette[selectForm.too+c,2]	=	selectForm.loadedPalette[selectForm.from+c,2];
						colours[selectForm.too+c].BackColor	=	Color.FromArgb(loadedPalette[selectForm.too+c,0],loadedPalette[selectForm.too+c,1],loadedPalette[selectForm.too+c,2]);
					}
					radioButton3.Checked		=	true;
					paletteSetting			=	PaletteMapping.mappedCustom;
					mappedLoadedCheckedChanged(sender,e);
				}
			}
		}		
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Map loaded radio button change
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void mappedLoadedCheckedChanged(object sender, EventArgs e)
		{	
			if(radioButton3.Checked == true)
			{ 
				paletteSetting		=	PaletteMapping.mappedCustom;
				label7.Visible		=	false;
				for(int c=0;c<256;c++)
				{				
					colours[c].BackColor	=	Color.FromArgb(loadedPalette[c,0],loadedPalette[c,1],loadedPalette[c,2]);
					//colours[c].Enabled	=	true;
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}
				for(int c=0;c<loadedColourCount;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	selectedColor;
				}
				setTColour(ref colours[transIndex]);
			}
		}
				
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Select a palette from file button click
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void paletteFromFileButtonClick(object sender, EventArgs e)
		{
			// select	
			selectForm.fullNames.Clear();
			foreach(string name in parentForm.fullNames)
			{ 
				selectForm.fullNames.Add(name);
			}
			selectForm.StartPosition	=		FormStartPosition.CenterParent;
			selectForm.fillList();
			selectForm.ShowDialog();
			selectForm.paletteFiles		=	false;
			label7.Visible			=	false;
			
			if (selectForm.DialogResult == DialogResult.OK && selectForm.fullNames.Count>0 && selectForm.listBox1.SelectedIndex>=0)
			{	
				for(int c=0;c<selectForm.count;c++)
				{
					loadedPalette[selectForm.too+c,0]	=	selectForm.loadedPalette[selectForm.from+c,0];
					loadedPalette[selectForm.too+c,1]	=	selectForm.loadedPalette[selectForm.from+c,1];
					loadedPalette[selectForm.too+c,2]	=	selectForm.loadedPalette[selectForm.from+c,2];
					colours[selectForm.too+c].BackColor	=	Color.FromArgb(loadedPalette[selectForm.too+c,0],loadedPalette[selectForm.too+c,1],loadedPalette[selectForm.too+c,2]);
				}
				radioButton3.Checked	=	true;
				mappedFromImageCheckedChanged(sender,e);
			}			
		}
						
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Mapped From Image button click
		//
		//-------------------------------------------------------------------------------------------------------------------

		private void mappedFromImageCheckedChanged(object sender, EventArgs e)
		{		
			if(radioButton3.Checked==true)
			{ 
				paletteSetting		=	PaletteMapping.mappedCustom;
				label7.Visible		=	false;
				for(int c=0;c<256;c++)
				{
					colours[c].BackColor			=	SystemColors.Control;
					//colours[c].Enabled			=	true;					
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}
				for(int c=0;c<loadedColourCount;c++)
				{
					colours[c].BackColor			=	Color.FromArgb(loadedPalette[c,0],loadedPalette[c,1],loadedPalette[c,2]);						
					colours[c].FlatAppearance.BorderColor	=	selectedColor;
				}				
				setTColour(ref colours[transIndex]);
			}
		}

		//-------------------------------------------------------------------------------------------------------------------
		//
		// Mapped to 512 palette button click
		//
		//-------------------------------------------------------------------------------------------------------------------
		
		private void mappedTo512PaletteCheckedChanged(object sender, EventArgs e)
		{
			if(radioButton2.Checked==true)
			{ 
				paletteSetting		=	PaletteMapping.mapped512;
				label7.Visible		=	true;
				
				for(int c=0;c<256;c++)
				{
					colours[c].BackColor			=	Color.FromArgb(SpecNext512[1+(c*2),0],SpecNext512[1+(c*2),1],SpecNext512[1+(c*2),2]);
				//	colours[c].Enabled			=	false;
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}				
				setTColour(ref colours[transIndex]);
			}
		}
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Mapped to 256 palette button click
		//
		//-------------------------------------------------------------------------------------------------------------------
				
		private void mappedTo256PaletteCheckedChanged(object sender, EventArgs e)
		{
			if(radioButton1.Checked==true)
			{ 
				paletteSetting		=	PaletteMapping.mapped256;
				label7.Visible		=	false;
				for(int c=0;c<256;c++)
				{
					colours[c].BackColor			=	Color.FromArgb(SpecNext256[(c),0],SpecNext256[(c),1],SpecNext256[(c),2]);
					//colours[c].Enabled			=	false;
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}				
				setTColour(ref colours[transIndex]);
			}
		}

		//-------------------------------------------------------------------------------------------------------------------
		// 
		// set the mapping mode
		//
		//-------------------------------------------------------------------------------------------------------------------

		public	void	SetPaletteMapping(string mappingString)
		{
			if(mappingString=="Next256")
			{
				paletteSetting		=	PaletteMapping.mapped256;
				radioButton1.Checked	=	true;
				label7.Visible		=	false;
			}
			else if(mappingString=="Next512")
			{
				paletteSetting		=	PaletteMapping.mapped512;
				radioButton2.Checked	=	true;
				label7.Visible		=	true;
			}
			else if(mappingString=="Custom")
			{
				paletteSetting		=	PaletteMapping.mappedCustom;
				radioButton3.Checked	=	true;
				label7.Visible		=	false;
			}			
		}

		//-------------------------------------------------------------------------------------------------------------------
		//
		// Map to the closest colour
		//
		//-------------------------------------------------------------------------------------------------------------------
					
		public	short	closestColor(int r,int g,int b, short reMap)//, bool bitsFour) 
		{
			short colorReturn		=	-1;
			int biggestDifference	=	1000;
			if(reMap<0)
			{ 
				switch(paletteSetting)
				{
					case	PaletteMapping.mapped256:
						for (short i = 0; i < 256; i++) 
						{
							if (Math.Sqrt(Math.Pow(r - SpecNext256[i,0],2) + Math.Pow(g - SpecNext256[i,1],2) + Math.Pow(b - SpecNext256[i,2],2)) < biggestDifference)
							{
								colorReturn = i;
								biggestDifference = (int) Math.Sqrt(Math.Pow(r - SpecNext256[i,0],2) + Math.Pow(g - SpecNext256[i,1],2) + Math.Pow(b - SpecNext256[i,2],2));
							}
						}
					break;
					case	PaletteMapping.mapped512:
						for (short i = 0; i < 512; i++) 
						{
							if (Math.Sqrt(Math.Pow(r - SpecNext512[i,0],2) + Math.Pow(g - SpecNext512[i,1],2) + Math.Pow(b - SpecNext512[i,2],2)) < biggestDifference)
							{
								colorReturn = i;
								biggestDifference = (int) Math.Sqrt(Math.Pow(r - SpecNext512[i,0],2) + Math.Pow(g - SpecNext512[i,1],2) + Math.Pow(b - SpecNext512[i,2],2));
							}
						}
					break;	
					case	PaletteMapping.mappedCustom:
					
						for (short i = 0; i < loadedColourCount; i++) 
						{
							if (Math.Sqrt(Math.Pow(r - loadedPalette[i,0],2) + Math.Pow(g - loadedPalette[i,1],2) + Math.Pow(b - loadedPalette[i,2],2)) < biggestDifference)
							{
								colorReturn = i;
								biggestDifference = (int) Math.Sqrt(Math.Pow(r - loadedPalette[i,0],2) + Math.Pow(g - loadedPalette[i,1],2) + Math.Pow(b - loadedPalette[i,2],2));
							}
						}
						break;	
				}
			}
			else
			{ 
				for (short i = reMap; i < reMap+16; i++) 
				{
					if (Math.Sqrt(Math.Pow(r - loadedPalette[i,0],2) + Math.Pow(g - loadedPalette[i,1],2) + Math.Pow(b - loadedPalette[i,2],2)) < biggestDifference)
					{
						colorReturn = i;
						biggestDifference = (int) Math.Sqrt(Math.Pow(r - loadedPalette[i,0],2) + Math.Pow(g - loadedPalette[i,1],2) + Math.Pow(b - loadedPalette[i,2],2));
					}
				}
			}
			return colorReturn;
		}

		//-------------------------------------------------------------------------------------------------------------------
		//
		// Set the maximum colours to use
		//
		//-------------------------------------------------------------------------------------------------------------------
			
		private void setMaxColoursToUseClick(object sender, EventArgs e)
		{
			if(int.TryParse(textBox1.Text, out loadedColourCount))
			{
				if(loadedColourCount>256)
				{
					loadedColourCount	=	256;
					textBox1.Text		=	"256";
				}
				for(int c=0;c<256;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}
				for(int c=0;c<loadedColourCount;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	selectedColor;
				}
				
			}
		}
		
		//-------------------------------------------------------------------------------------------------------------------
		//
		// Pick a transparent colour
		//
		//-------------------------------------------------------------------------------------------------------------------
			
		private void TransPickClick(object sender, EventArgs e)
		{
			colourPicking	=	true;
		}

		//-------------------------------------------------------------------------------------------------------------------
		//
		// Save palette click
		//
		//-------------------------------------------------------------------------------------------------------------------
			
		private void savePaletteClick(object sender, EventArgs e)
		{
			SaveFileDialog savePaletteDialog		=	new SaveFileDialog();
			savePaletteDialog.InitialDirectory		=	Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			savePaletteDialog.RestoreDirectory		=	true ;
			savePaletteDialog.Filter			=	"Palette Files (*.act)|*.act|Mac Palette Files (*.8bct)|*.8bct|All Files (*.*)|*.*";
			savePaletteDialog.FilterIndex			=	1;
			if (savePaletteDialog.ShowDialog(this) == DialogResult.OK)
			{
				using (FileStream fsSource = new FileStream(savePaletteDialog.FileName, FileMode.Create, FileAccess.Write))
				{						
					for(int i = 0; i < 256; i++)
					{
						fsSource.WriteByte(loadedPalette[i,0]);
						fsSource.WriteByte(loadedPalette[i,1]);
						fsSource.WriteByte(loadedPalette[i,2]);
					}	
					if (littleEndian == true)
					{
						fsSource.WriteByte((byte)(loadedColourCount&255));
						fsSource.WriteByte((byte)(loadedColourCount>>8));
					}
					else
					{
						fsSource.WriteByte((byte)(loadedColourCount>>8));
						fsSource.WriteByte((byte)(loadedColourCount&255));
					}
					if (littleEndian == true)
					{
						fsSource.WriteByte((byte)(transIndex&255));
						fsSource.WriteByte((byte)(transIndex>>8));
					}
					else
					{
						fsSource.WriteByte((byte)(transIndex>>8));
						fsSource.WriteByte((byte)(transIndex&255));
					}
				}
			}
			
		}

		//-------------------------------------------------------------------------------------------------------------------
		// 
		// set colours of the buttons and clear the rest
		//
		//-------------------------------------------------------------------------------------------------------------------
		
		private void setButtonColours(object sender, EventArgs e)
		{			
			if(int.TryParse(textBox1.Text, out loadedColourCount))
			{
				if(loadedColourCount>256)
				{
					loadedColourCount	=	256;
					textBox1.Text		=	"256";
				}
				for(int c=0;c<256;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	SystemColors.ControlDark;
				}
				for(int c=0;c<loadedColourCount;c++)
				{											
					colours[c].FlatAppearance.BorderColor	=	selectedColor;
				}
				
			}
		}

		//-------------------------------------------------------------------------------------------------------------------
		// 
		// check before closing
		//
		//-------------------------------------------------------------------------------------------------------------------
		
		private void checkNumColoursClosing(object sender, FormClosingEventArgs e)
		{
			if(textBox1.Text=="255")
			{ 
				var result = MessageBox.Show("Have you forgotten to set the number of colours to use?", "Error", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
				if (result == DialogResult.Cancel)
				{
					  e.Cancel = true;
				}
			}
		}
	}
}
