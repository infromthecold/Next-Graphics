using Microsoft.VisualStudio.TestTools.UnitTesting;

using NextGraphics.Models;
using NextGraphics.Exporting;

using System;
using System.IO;
using System.Linq;
using System.Xml;

using UnitTests.Data;
using NextGraphics.Exporting.Common;
using System.Drawing;
using System.Text.RegularExpressions;

namespace UnitTests
{
	/*
	 * Note: this test class was created for purposes of extracting exporting code out of main.cs so it doesn't necessarily cover all future exporting capabilities (would be nice to do so though).
	 * 
	 * Test data was generated with original codebase (prior to extracting export from main.cs). Each exported file was added to unit test project as resource and tested against with data generated by exporter class. Assembler output file header was additionally tweaked for each resource so that the date code can be tested - files in resources use `{0}` template which is replaced with the date used on test run. Other files are used exactly as generated by the original codebase.
	 */

	[TestClass]
	public class ExporterTesting
	{
		#region Tiles

		#region Assembler

		[TestMethod]
		public void Tiles_Assembler_FullComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_NoComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_FullComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_NoComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BlocksImage()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.TilesInfoStream, DataCreator.TilesBlk(), "blk");
				VerifyBinary(parameters.BlocksImageStream, DataCreator.TilesImageBlocks(), "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.None, withImages: true));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_TilesImage()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.None, withImages: true));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BlocksTilesImage()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.TilesInfoStream, DataCreator.TilesBlk(), "blk");
				VerifyBinary(parameters.BlocksImageStream, DataCreator.TilesImageBlocks(), "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTiles(parameters.Time, CommentType.None, withImages: true));
			});
		}

		#endregion

		#region Assembler+Binary

		[TestMethod]

		public void Tiles_Assembler_Binary_FullComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinary(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_Binary_FullComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinary(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_Binary_NoComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinary(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_Binary_NoComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinary(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_Binary_BlocksImage()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.TilesExportAsImage = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.TilesInfoStream, DataCreator.TilesBlk(), "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinary(parameters.BlocksImageStream, DataCreator.TilesImageBlocks(), "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinary(parameters.Time, CommentType.Full, withImages: true));
			});
		}

		#endregion

		#region Assembler+Binary+Blocks

		[TestMethod]
		public void Tiles_Assembler_BinaryBlocks_FullComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinary(parameters.TilesStream, DataCreator.TilesTil(), "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinaryAndBlocks(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BinaryBlocks_FullComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinary(parameters.TilesStream, DataCreator.TilesTil(), "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinaryAndBlocks(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BinaryBlocks_NoComments_PaletteNext8Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinary(parameters.TilesStream, DataCreator.TilesTil(), "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinaryAndBlocks(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BinaryBlocks_NoComments_PaletteNext9Bit()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.TilesExportAsImage = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinary(parameters.TilesStream, DataCreator.TilesTil(), "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinaryAndBlocks(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Tiles_Assembler_BinaryBlocks_BlocksImage()
		{
			TestTiles((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Tiles;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.TilesExportAsImage = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.TilesBin(), "bin");
				VerifyBinary(parameters.TilesStream, DataCreator.TilesTil(), "til");
				VerifyBinary(parameters.TilesInfoStream, DataCreator.TilesBlk(), "blk");
				VerifyBinary(parameters.MapStream, DataCreator.TilesMap(), "map");
				VerifyBinary(parameters.BlocksImageStream, DataCreator.TilesImageBlocks(), "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyAssembler(parameters, DataCreator.AssemblerTilesAndBinaryAndBlocks(parameters.Time, CommentType.Full, withImages: true));
			});
		}

		#endregion

		#endregion

		#region Sprites

		#region Assembler

		[TestMethod]
		public void Sprites_Assembler_FullComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSprites(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_FullComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSprites(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_NoComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSprites(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_NoComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSprites(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_TilesImage()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = false;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinary(parameters.TilesImageStream, DataCreator.SpritesImageTiles(), "tiles image");
				VerifyBinaryArray(14, (i) => DataCreator.SpritesImageBlock(i), parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSprites(parameters.Time, CommentType.None, withImages: true));
			});
		}

		#endregion

		#region Assembler+Binary

		[TestMethod]
		public void Sprites_Assembler_Binary_FullComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinary(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_Binary_FullComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinary(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_Binary_NoComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinary(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_Binary_NoComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinary(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_Binary_TilesImage()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = false;
				model.SpritesExportAsImages = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinary(parameters.TilesImageStream, DataCreator.SpritesImageTiles(), "tiles image");
				VerifyBinaryArray(14, (i) => DataCreator.SpritesImageBlock(i), parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinary(parameters.Time, CommentType.Full, withImages: true));
			});
		}

		#endregion

		#region Assembler+Binary+Blocks

		[TestMethod]
		public void Sprites_Assembler_BinaryBlocks_FullComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.TilesStream, DataCreator.SpritesTil(), "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinaryAndBlocks(parameters.Time, CommentType.Full));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_BinaryBlocks_FullComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.TilesStream, DataCreator.SpritesTil(), "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinaryAndBlocks(parameters.Time, CommentType.Full, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_BinaryBlocks_NoComments_PaletteNext8Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.TilesStream, DataCreator.SpritesTil(), "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinaryAndBlocks(parameters.Time, CommentType.None));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_BinaryBlocks_NoComments_PaletteNext9Bit()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.None;
				model.PaletteFormat = PaletteFormat.Next9Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.SpritesExportAsImages = false;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.TilesStream, DataCreator.SpritesTil(), "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(PaletteFormat.Next9Bit), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(20, parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinaryAndBlocks(parameters.Time, CommentType.None, PaletteFormat.Next9Bit));
			});
		}

		[TestMethod]
		public void Sprites_Assembler_BinaryBlocks_TilesImage()
		{
			TestSprites((model, parameters, exporter) =>
			{
				// setup
				model.OutputType = OutputType.Sprites;
				model.CommentType = CommentType.Full;
				model.PaletteFormat = PaletteFormat.Next8Bit;
				model.BinaryOutput = true;
				model.BinaryFramesAttributesOutput = true;
				model.SpritesExportAsImages = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.TilesStream, DataCreator.SpritesTil(), "til");
				VerifyBinary(parameters.PaletteStream, DataCreator.SpritesPal(), "pal");
				VerifyBinary(parameters.BinaryStream, DataCreator.SpritesBin(), "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinary(parameters.TilesImageStream, DataCreator.SpritesImageTiles(), "tiles image");
				VerifyBinaryArray(14, (i) => DataCreator.SpritesImageBlock(i), parameters.BlockImageStream, "block image");
				VerifyAssembler(parameters, DataCreator.AssemblerSpritesAndBinaryAndBlocks(parameters.Time, CommentType.Full, withImages: true));
			});
		}

		#endregion

		#endregion

		#region Tilemaps

		// note: we only test 2 configurations here, one is assembler output, the other binary. Everything else is exactly the same as for tiles/sprites.

		[TestMethod]
		public void Tilemap_Assembler_Words()
		{
			TestTilemaps((model, parameters, exporter) =>
			{
				// setup
				model.BinaryOutput = false;
				model.TilemapExportType = TilemapExportType.AttributesIndexAsWord;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(10, parameters.TilemapsStream, "tilemaps");
				VerifyAssembler(parameters, DataCreator.AssemblerTilemaps(parameters.Time, TilemapExportType.AttributesIndexAsWord, false));
			});
		}

		[TestMethod]
		public void Tilemap_Assembler_2Bytes()
		{
			TestTilemaps((model, parameters, exporter) =>
			{
				// setup
				model.BinaryOutput = false;
				model.TilemapExportType = TilemapExportType.AttributesIndexAsTwoBytes;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(10, parameters.TilemapsStream, "tilemaps");
				VerifyAssembler(parameters, DataCreator.AssemblerTilemaps(parameters.Time, TilemapExportType.AttributesIndexAsTwoBytes, false));
			});
		}

		[TestMethod]
		public void Tilemap_Assembler_1Byte()
		{
			TestTilemaps((model, parameters, exporter) =>
			{
				// setup
				model.BinaryOutput = false;
				model.TilemapExportType = TilemapExportType.IndexOnly;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinaryIsEmpty(parameters.PaletteStream, "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArrayIsEmpty(10, parameters.TilemapsStream, "tilemaps");
				VerifyAssembler(parameters, DataCreator.AssemblerTilemaps(parameters.Time, TilemapExportType.IndexOnly, false));
			});
		}

		[TestMethod]
		public void Tilemap_Binary()
		{
			TestTilemaps((model, parameters, exporter) =>
			{
				// setup
				model.BinaryOutput = true;

				// execute
				exporter.Remap();
				exporter.Export();

				// verify
				VerifyBinary(parameters.PaletteStream, DataCreator.TilesPal(), "pal");
				VerifyBinaryIsEmpty(parameters.BinaryStream, "bin");
				VerifyBinaryIsEmpty(parameters.MapStream, "map");
				VerifyBinaryIsEmpty(parameters.TilesStream, "til");
				VerifyBinaryIsEmpty(parameters.TilesInfoStream, "blk");
				VerifyBinaryIsEmpty(parameters.BlocksImageStream, "blocks image");
				VerifyBinaryIsEmpty(parameters.TilesImageStream, "tiles image");
				VerifyBinaryArray(1, (i) => DataCreator.TilemapGeneratedData2x2(), parameters.TilemapsStream, "tilemaps");
				VerifyAssembler(parameters, DataCreator.AssemblerTilemaps(parameters.Time, TilemapExportType.AttributesIndexAsWord, true));
			});
		}

		#endregion

		#region Creating

		private void TestTilemaps(Action<MainModel, ExportParameters, Exporter> tester)
		{
			Test(
				DataCreator.XmlDocumentTiles(),	// we can reuse tiles document
				null,							// no source image needed
				DataCreator.TilemapData2x2(),
				(model, parameters, exporter) =>
				{
					// For tilemaps we only test a subset since the rest of the export is exactly like tiles/sprites. So we can setup common values here.
					model.OutputType = OutputType.Tiles;
					model.CommentType = CommentType.Full;
					model.PaletteFormat = PaletteFormat.Next8Bit;

					// After common values are set, we can call out to tester to further setup or run the test.
					tester(model, parameters, exporter);
				});
		}

		private void TestTiles(Action<MainModel, ExportParameters, Exporter> tester)
		{
			Test(
				DataCreator.XmlDocumentTiles(),
				DataCreator.ImageTiles1(),
				null,
				tester);
		}

		private void TestSprites(Action<MainModel, ExportParameters, Exporter> tester)
		{
			Test(
				DataCreator.XmlDocumentSprites(),
				DataCreator.ImageSprites1(),
				null,
				tester);
		}

		private void Test(
			XmlDocument sourceDocument, 
			Bitmap sourceBitmap, 
			TilemapData sourceTilemap,
			Action<MainModel, ExportParameters, Exporter> tester)
		{
			// We use memory streams so that we can later on examine the results without writing out files - faster and more predictable. 
			using (
				MemoryStream sourceStream = new MemoryStream(),
				binaryStream = new MemoryStream(),
				paletteStream = new MemoryStream(),
				mapStream = new MemoryStream(),
				tilesStream = new MemoryStream(),
				tilesImageStream = new MemoryStream(),
				tilesInfoStream = new MemoryStream(),
				blocksImageStream = new MemoryStream())
			{
				var tilemapStreams = new MemoryStream[10];
				var blockStreams = new MemoryStream[40];

				// We want streams to be "constant", created only once per test and then reused whenever anyone calls out the closures.
				var parameters = new ExportParameters
				{
					Time = DateTime.Now,

					ExportCallbacks = new ExportCallbacksImpl(),

					SourceStream = () => sourceStream,
					PaletteStream = () => paletteStream,
					BinaryStream = () => binaryStream,
					MapStream = () => mapStream,
					TilesStream = () => tilesStream,
					TilesInfoStream = () => tilesInfoStream,
					TilesImageStream = () => tilesImageStream,
					TilemapsStream = (i) =>
					{
						if (tilemapStreams[i] == null)
						{
							tilemapStreams[i] = new MemoryStream();
						}
						return tilemapStreams[i];
					},
					BlocksImageStream = () => blocksImageStream,
					BlockImageStream = (i) =>
					{
						if (blockStreams[i] == null)
						{
							blockStreams[i] = new MemoryStream();
						}
						return blockStreams[i];
					},
				};

				// We load default data and rely on each test to set it up as needed. This sets up model with default parameters, but we can later change them as needed in each specific test.
				var model = DataCreator.LoadModel(sourceDocument);

				if (sourceBitmap != null)
				{
					model.AddSource(new SourceImage("image1", sourceBitmap));
				}

				if (sourceTilemap != null)
				{
					model.AddSource(new SourceTilemapMap("tilemap1", sourceTilemap));
				}

				// Prepare exporter.
				var exporter = new Exporter(model, parameters);

				// Call out tester closure to actually perform the test.
				tester(model, parameters, exporter);

				foreach (var stream in blockStreams)
				{
					if (stream != null)
					{
						stream.Dispose();
					}
				}
			}
		}

		#endregion

		#region Verifying

		private void VerifyAssembler(ExportParameters parameters, string expected) 
		{
			// Prepare new memory stream as original one was already closed after writing the output.
			using (var actual = new MemoryStream(((MemoryStream)parameters.SourceStream()).ToArray()))
			{
				// This code trims all empty lines so we can compare just data.
				var expectedLines = expected.ToLines().Where(line => line.Trim().Length > 0).ToList();
				var actualLines = actual.ToLines().Where(line => line.Trim().Length > 0).ToList();

				// Note: we could assert on both lists direclty, but then assertion errors are not very helpful...
				Assert.AreEqual(expectedLines.Count, actualLines.Count, $"assembler lines count is different");

				string SanitizedLine(string line)
				{
					return Regex.Replace(line, @"\s+", " ");
				}

				for (var i=0; i<expectedLines.Count; i++)
				{
					// We replace all whitespace with single space to match only on actual data.
					var expectedLine = SanitizedLine(expectedLines[i]);
					var actualLine = SanitizedLine(actualLines[i]);
					Assert.AreEqual(expectedLine, actualLine, $"assembler line {i + 1} different");
				}
			}
		}

		private void VerifyBinary(Func<Stream> stream, byte[] expected, string explanation = "")
		{
			var actual = ((MemoryStream)stream()).ToArray();
			Assert.AreEqual(expected.Length, actual.Length, $"{explanation} size is different");
				
			for (var i=0; i<expected.Length; i++)
			{
				var expectedByte = expected[i];
				var actualByte = actual[i];

				Assert.AreEqual(expectedByte, actualByte, $"{explanation} byte {i} is different");
			}
		}

		private void VerifyBinaryArray(int count, Func<int, byte[]> expected, Func<int, Stream> streams, string explanation = "")
		{
			// If no stream was produced, we assume it's indeed emtpy.
			if (streams == null) return;

			for (int i = 0; i < count; i++)
			{
				var actualStream = streams(i);
				var expectedData = expected(i);

				VerifyBinary(() => actualStream, expectedData, $"{explanation}[{i}]");
			}
		}

		private void VerifyBinaryIsEmpty(Func<Stream> stream, string explanation = "")
		{
			// If no stream  was produces, we assume it's indeed empty...
			if (stream == null) return;

			using (var actual = new MemoryStream(((MemoryStream)stream()).ToArray()))
			{
				Assert.AreEqual(0, actual.Length, $"{explanation} size is not zero");
			}
		}

		private void VerifyBinaryArrayIsEmpty(int count, Func<int, Stream> streams, string explanation = "")
		{
			// If no stream was produced, we assume it's indeed emtpy.
			if (streams == null) return;

			for (int i=0; i<count; i++)
			{
				using (var actual = new MemoryStream(((MemoryStream)streams(i)).ToArray()))
				{
					Assert.AreEqual(0, actual.Length, $"{explanation}[{i}] size is not zero");
				}
			}
		}

		#endregion

		#region Declarations

		private class ExportCallbacksImpl : ExportCallbacks
		{
			public void OnExportStarted()
			{
			}

			public void OnExportCompleted()
			{
			}

			public string OnExportTilesInfoFilename()
			{
				return DataCreator.TilesBlkFilename();
			}

			public byte OnExportFourBitColourConverter(byte proposed)
			{
				return proposed;
			}

			public byte OnExportPaletteOffsetMapper(byte proposed)
			{
				return proposed;
			}
		}

		#endregion
	}
}
